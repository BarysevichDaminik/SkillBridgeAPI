// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkillBridgeAPI.Models;

#nullable disable

namespace SkillBridgeAPI.Migrations
{
    [DbContext(typeof(SkillbridgeContext))]
    [Migration("20250304151448_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sessionchat", b =>
                {
                    b.Property<long>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.HasKey("ExchangeId", "ChatId")
                        .HasName("sessionchat_pkey");

                    b.HasIndex(new[] { "ChatId" }, "IX_sessionchat_chat_id");

                    b.ToTable("sessionchat", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Chat", b =>
                {
                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatId"));

                    b.Property<string>("ChatName")
                        .HasColumnType("text")
                        .HasColumnName("chat_name");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("ExchangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    b.HasKey("ChatId")
                        .HasName("chat_pkey");

                    b.HasIndex(new[] { "ExchangeId" }, "IX_chat_exchange_id");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Exchange", b =>
                {
                    b.Property<long>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("exchange_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ExchangeId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<long>("UserId1")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id_1");

                    b.Property<long>("UserId2")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id_2");

                    b.HasKey("ExchangeId")
                        .HasName("exchange_pkey");

                    b.HasIndex(new[] { "UserId1" }, "IX_exchange_user_id_1");

                    b.HasIndex(new[] { "UserId2" }, "IX_exchange_user_id_2");

                    b.ToTable("exchange", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MessageId"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("MessageType")
                        .HasColumnType("text")
                        .HasColumnName("message_type");

                    b.Property<DateTime?>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("MessageId")
                        .HasName("message_pkey");

                    b.HasIndex(new[] { "ChatId" }, "IX_message_chat_id");

                    b.HasIndex(new[] { "UserId" }, "IX_message_user_id");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Reaction", b =>
                {
                    b.Property<long>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReactionId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<string>("ReactionType")
                        .HasColumnType("text")
                        .HasColumnName("reaction_type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ReactionId")
                        .HasName("reaction_pkey");

                    b.HasIndex(new[] { "MessageId" }, "IX_reaction_message_id");

                    b.HasIndex(new[] { "UserId" }, "IX_reaction_user_id");

                    b.ToTable("reaction", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.RefreshToken", b =>
                {
                    b.Property<long>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TokenId"));

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId")
                        .HasName("token_id");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Skill", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("skill_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SkillId"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skill_name");

                    b.HasKey("SkillId")
                        .HasName("skill_pkey");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<short>("AvatarNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("avatar_number");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<short>("LoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("login_attempts");

                    b.Property<DateTime?>("NextAttemptAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_attempt_at");

                    b.Property<string>("PwdHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pwd_hash");

                    b.Property<short>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("rating");

                    b.Property<bool?>("SubscriptionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("subscription_status");

                    b.Property<string>("Ulid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ulid");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "Email" }, "User_email_key")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Userskill", b =>
                {
                    b.Property<long>("UserSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_skill_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserSkillId"));

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_id");

                    b.Property<string>("SkillType")
                        .HasColumnType("text")
                        .HasColumnName("skill_type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("UserSkillId")
                        .HasName("userskill_pkey");

                    b.HasIndex(new[] { "SkillId" }, "IX_userskill_skill_id");

                    b.HasIndex(new[] { "UserId" }, "IX_userskill_user_id");

                    b.ToTable("userskill", (string)null);
                });

            modelBuilder.Entity("Sessionchat", b =>
                {
                    b.HasOne("SkillBridgeAPI.Models.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sessionchat_chat_id_fkey");

                    b.HasOne("SkillBridgeAPI.Models.Exchange", null)
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sessionchat_exchange_id_fkey");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Chat", b =>
                {
                    b.HasOne("SkillBridgeAPI.Models.Exchange", "Exchange")
                        .WithMany("Chats")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("chat_exchange_id_fkey");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Exchange", b =>
                {
                    b.HasOne("SkillBridgeAPI.Models.User", "UserId1Navigation")
                        .WithMany("ExchangeUserId1Navigations")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exchange_user_id_1_fkey");

                    b.HasOne("SkillBridgeAPI.Models.User", "UserId2Navigation")
                        .WithMany("ExchangeUserId2Navigations")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exchange_user_id_2_fkey");

                    b.Navigation("UserId1Navigation");

                    b.Navigation("UserId2Navigation");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Message", b =>
                {
                    b.HasOne("SkillBridgeAPI.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_chat_id_fkey");

                    b.HasOne("SkillBridgeAPI.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_user_id_fkey");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Reaction", b =>
                {
                    b.HasOne("SkillBridgeAPI.Models.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reaction_message_id_fkey");

                    b.HasOne("SkillBridgeAPI.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reaction_user_id_fkey");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Userskill", b =>
                {
                    b.HasOne("SkillBridgeAPI.Models.Skill", "Skill")
                        .WithMany("Userskills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userskill_skill_id_fkey");

                    b.HasOne("SkillBridgeAPI.Models.User", "User")
                        .WithMany("Userskills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("userskill_user_id_fkey");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Exchange", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Message", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.Skill", b =>
                {
                    b.Navigation("Userskills");
                });

            modelBuilder.Entity("SkillBridgeAPI.Models.User", b =>
                {
                    b.Navigation("ExchangeUserId1Navigations");

                    b.Navigation("ExchangeUserId2Navigations");

                    b.Navigation("Messages");

                    b.Navigation("Reactions");

                    b.Navigation("Userskills");
                });
#pragma warning restore 612, 618
        }
    }
}
